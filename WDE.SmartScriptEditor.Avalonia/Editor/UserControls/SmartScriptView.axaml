<UserControl x:Class="WDE.SmartScriptEditor.Avalonia.Editor.UserControls.SmartScriptView"
             xmlns="https://github.com/avaloniaui"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:viewModels="clr-namespace:WDE.SmartScriptEditor.Editor.ViewModels"
             xmlns:system="clr-namespace:System;assembly=System.Runtime"
             xmlns:userControls="clr-namespace:WDE.SmartScriptEditor.Avalonia.Editor.UserControls"
             xmlns:models="clr-namespace:WDE.SmartScriptEditor.Models;assembly=WDE.SmartScriptEditor"
             xmlns:viewModels1="clr-namespace:WDE.SmartScriptEditor.Editor.ViewModels;assembly=WDE.SmartScriptEditor"
             x:DataType="viewModels1:SmartScriptEditorViewModel"
             mc:Ignorable="d" x:Name="Rooot"
             Background="{DynamicResource SmartScripts.Background}"
             d:DesignHeight="300" d:DesignWidth="300">
    <UserControl.Resources>
        <system:Boolean x:Key="FalseValue">False</system:Boolean>
        <system:Boolean x:Key="TrueValue">True</system:Boolean>
        <FloatToScaleTransformConverter x:Key="FloatToScaleTransformConverter" />
    </UserControl.Resources>
    <UserControl.KeyBindings>
        <KeyBinding Gesture="Back" Command="{CompiledBinding DeleteSelected}" />
        <KeyBinding Gesture="Delete" Command="{CompiledBinding DeleteSelected}" />
        <KeyBinding Gesture="Enter" Command="{CompiledBinding EditSelected}" />
        <KeyBinding Gesture="Ctrl+A" Command="{CompiledBinding SelectAll}" />
        <KeyBinding Gesture="Ctrl+Up" Command="{CompiledBinding SelectionUp}"
                    CommandParameter="{StaticResource TrueValue}" />
        <KeyBinding Gesture="Ctrl+Down" Command="{CompiledBinding SelectionDown}"
                    CommandParameter="{StaticResource TrueValue}" />
        <KeyBinding Gesture="Shift+Up" Command="{CompiledBinding SelectionUp}"
                    CommandParameter="{StaticResource TrueValue}" />
        <KeyBinding Gesture="Shift+Down" Command="{CompiledBinding SelectionDown}"
                    CommandParameter="{StaticResource TrueValue}" />
        <KeyBinding Gesture="Right" Command="{CompiledBinding SelectionRight}" />
        <KeyBinding Gesture="Left" Command="{CompiledBinding SelectionLeft}" />
        <KeyBinding Gesture="Up" Command="{CompiledBinding SelectionUp}" CommandParameter="{StaticResource FalseValue}" />
        <KeyBinding Gesture="Down" Command="{CompiledBinding SelectionDown}" CommandParameter="{StaticResource FalseValue}" />

    </UserControl.KeyBindings>
    
    <UserControl.Styles>
        <Style Selector="Button.FlatButton">
            <Setter Property="Cursor" Value="Hand" />
            <Setter Property="BorderBrush" Value="Transparent" />
            <Setter Property="Background" Value="Transparent" />
            <Setter Property="HorizontalAlignment" Value="Stretch" />
            <Setter Property="HorizontalContentAlignment" Value="Left" />
            <Setter Property="VerticalContentAlignment" Value="Top" />
        </Style>
        <Style Selector="Button.FlatButton:pointerover /template/ ContentPresenter">
            <Setter Property="BorderBrush" Value="Transparent" />
            <Setter Property="Background" Value="Transparent" />
        </Style>
        <Style Selector="Button.FlatButton:pressed /template/ ContentPresenter">
            <Setter Property="BorderBrush" Value="Transparent" />
            <Setter Property="Background" Value="Transparent" />
        </Style>
    </UserControl.Styles>
    <userControls:InverseRenderTransformPanel
        RenderTransformOrigin="0, 0"
        RenderTransform="{CompiledBinding Scale, Converter={StaticResource FloatToScaleTransformConverter}}"
        >
        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="*" MinHeight="30" />
            </Grid.RowDefinitions>
            <ItemsControl Focusable="False" Items="{CompiledBinding Together}" IsHitTestVisible="True" DockPanel.Dock="Top"
                          Margin="7,0,7,0">
                <ItemsControl.ContextMenu>
                    <ContextMenu>
                        <MenuItem Command="{CompiledBinding NewActionAboveCommand}" IsVisible="{CompiledBinding AnySelected}" Header="New action above" />
                        <MenuItem Command="{CompiledBinding NewActionBelowCommand}" IsVisible="{CompiledBinding AnySelected}" Header="New action below" />
                        <Separator IsVisible="{CompiledBinding AnySelected}" />
                        <MenuItem IsVisible="{CompiledBinding AnySelected}" Command="{CompiledBinding NewEventAboveCommand}" Header="New event above" />
                        <MenuItem Command="{CompiledBinding NewEventBelowCommand}" Header="New event below" />
                        <Separator />
                        <MenuItem Command="{CompiledBinding EditConditionsCommand}" Header="Edit conditions" />
                        <Separator />
                        <MenuItem Command="{CompiledBinding Copy}" Header="Copy" />
                        <MenuItem Command="{CompiledBinding Cut}" Header="Cut" />
                        <MenuItem Command="{CompiledBinding Paste}" Header="Paste" />
                        <Separator />
                        <MenuItem Command="{CompiledBinding DeleteSelected}" Header="Delete" />
                    </ContextMenu>
                </ItemsControl.ContextMenu>
                <ItemsControl.DataTemplates>
                    <DataTemplate DataType="{x:Type models:SmartEvent}">
                        <userControls:SmartEventView
                            Selected="{CompiledBinding IsSelected, Mode=TwoWay}"
                            userControls:SmartScriptPanelLayout.Selected="{CompiledBinding IsSelected, Mode=TwoWay}"
                            DirectEditParameter="{Binding DataContext.DirectEditParameter, ElementName=Rooot}"
                            DeselectActionsOfDeselectedEventsRequest="{Binding DataContext.DeselectAllButEvents, ElementName=Rooot}"
                            DeselectAllRequest="{Binding DataContext.DeselectAll, ElementName=Rooot}"
                            IsSelected="{CompiledBinding IsSelected, Mode=TwoWay}"
                            EditEventCommand="{Binding DataContext.EditEvent, ElementName=Rooot}"
                            IsHitTestVisible="True"/>
                    </DataTemplate>
                    <DataTemplate DataType="{x:Type models:SmartAction}">
                        <userControls:SmartActionView
                            Indent="{CompiledBinding Indent}"
                            DirectEditParameter="{Binding DataContext.DirectEditParameter, ElementName=Rooot}"
                            DirectOpenParameter="{Binding DataContext.DirectOpenParameter, ElementName=Rooot}"
                            userControls:SelectableTemplatedControl.DeselectAllRequest="{Binding DataContext.DeselectAll, ElementName=Rooot}"
                            DeselectAllButActionsRequest="{Binding DataContext.DeselectAllButActions, ElementName=Rooot}"
                            EditActionCommand="{Binding DataContext.EditAction, ElementName=Rooot}"
                            IsSelected="{CompiledBinding IsSelected, Mode=TwoWay}"
                            userControls:SmartScriptPanelLayout.Selected="{CompiledBinding IsSelected, Mode=TwoWay}"
                        />
                    </DataTemplate>
                    <DataTemplate DataType="{x:Type models:SmartCondition}">
                        <userControls:SmartConditionView
                            DirectEditParameter="{Binding DataContext.DirectEditParameter, ElementName=Rooot}"
                            DeselectAllRequest="{Binding DataContext.DeselectAll, ElementName=Rooot}"
                            DeselectAllButConditionsRequest="{Binding DataContext.DeselectAllButConditions, ElementName=Rooot}"
                            EditConditionCommand="{Binding DataContext.EditCondition, ElementName=Rooot}"
                            userControls:SmartScriptPanelLayout.Selected="{CompiledBinding IsSelected, Mode=TwoWay}"
                            IsSelected="{CompiledBinding IsSelected, Mode=TwoWay}"
                            />
                    </DataTemplate>
                    <DataTemplate DataType="{x:Type models:GlobalVariable}">
                        <userControls:GlobalVariableView
                            DeselectAllRequest="{Binding DataContext.DeselectAll, ElementName=Rooot}"
                            EditGlobalVariableCommand="{Binding DataContext.EditGlobalVariable, ElementName=Rooot}"
                            DeselectAllButGlobalVariablesRequest="{Binding DataContext.DeselectAllButGlobalVariables, ElementName=Rooot}"
                            userControls:SmartScriptPanelLayout.Selected="{CompiledBinding IsSelected, Mode=TwoWay}"
                            IsSelected="{CompiledBinding IsSelected, Mode=TwoWay}"
                        />
                    </DataTemplate>
                    <DataTemplate DataType="{x:Type viewModels1:NewActionViewModel}">
                        <Button Classes="FlatButton"
                                Content="Add action"
                                Opacity="0.5"
                                Command="{Binding DataContext.AddAction, ElementName=Rooot}"
                                CommandParameter="{CompiledBinding}">
                        </Button>
                    </DataTemplate>
                
                    <DataTemplate DataType="{x:Type viewModels1:NewConditionViewModel}">
                        <Button Classes="FlatButton"
                            Content="Add condition"
                            Opacity="0.5"
                            Command="{Binding DataContext.AddCondition, ElementName=Rooot}"
                            CommandParameter="{CompiledBinding}">
                        </Button>
                    </DataTemplate>
                </ItemsControl.DataTemplates>

                <ItemsControl.ItemsPanel>
                    <ItemsPanelTemplate>
                        <userControls:SmartScriptPanelLayout Background="Transparent"
                                                             Focusable="True"
                                                      Script="{CompiledBinding Script}" 
                                                      Problems="{CompiledBinding ProblematicLines}" 
                                                      DropItems="{CompiledBinding OnDropItems}"
                                                      DropActions="{CompiledBinding OnDropActions}"
                                                      DropConditions="{CompiledBinding OnDropConditions}"
                                                      />
                    </ItemsPanelTemplate>
                </ItemsControl.ItemsPanel>
            </ItemsControl>
            <Button
                Grid.Row="1" 
                Classes="FlatButton"
                Opacity="0.5"
                Content="Add event"
                Command="{CompiledBinding AddEvent}">
                <Button.ContextMenu>
                    <ContextMenu>
                        <MenuItem Header="Define global variable" 
                                  Command="{CompiledBinding DefineGlobalVariable}" />
                        </ContextMenu>
                </Button.ContextMenu>
            </Button>
        </Grid>
    </userControls:InverseRenderTransformPanel>
</UserControl>